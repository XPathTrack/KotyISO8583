package org.refactor.tcp;

import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;

import org.refactor.iso8583.data_class.IsoData;
import org.refactor.iso8583.exceptions.Iso8583InvalidFormatException;
import org.refactor.iso8583.formatters.HexFormatter;
import org.refactor.iso8583.formatters.IsoFormatter;
import org.refactor.tcp.data.Client;
import org.refactor.ui.MainFrame;
import org.refactor.utils.TaskThread;
import org.refactor.utils.ToolBox;

/**
 * @author PathTrack
 */
public class Communication {

    private static final Communication instance = new Communication();

    private IsoFormatter isoFormatter;
    private final TaskThread taskExecutor = new TaskThread();

    private Communication() {
    }

    public static Communication getInstance() {
        return instance;
    }

    public void prepare() throws Iso8583InvalidFormatException {
        isoFormatter = new IsoFormatter();
    }

    public void release() {
        isoFormatter = null;
        taskExecutor.release();
    }

    public void receive(Client client, CommunicationListener communicationListener) {
        taskExecutor.addTask(() -> {
            byte[] data;
            try {
                data = receive(client.getSocket());
            } catch (IOException ex) {
                communicationListener.onFinish(false);
                return;
            }
            System.out.println("ISO_RECEIVED: " + HexFormatter.toHexString(data));
            try {
                IsoData isoData = isoFormatter.decode(data);
                System.out.println("DECODED ISO -> {\n" + isoData.toString() + "\n}");
                client.getTalkLog().add(isoData);

                if (MainFrame.delay > 0) {
                    try {
                        Thread.sleep(MainFrame.delay * 1000L);
                    } catch (InterruptedException e) {
                        int a = Integer.parseInt("h");
                        e.printStackTrace();
                        return;
                    }
                }
                String msg;
                switch (isoData.getMti()[0]) {
                    case 4://reverso
                        msg = "600000000004103020070022C0900600000000000090000000000500510000000048167670743550D011532324D63651016D4D5DD8317859D14530303030303031313137303030303030303036303730303031363030B04B980784D08DAC00063030303030310132000331333000033234300022333330303030313232303330363734343030303030350013373039323230332D303637343400423831393232303330363734343132333435363738393031323334353637383930313233343536373839300004383430350009393057322E3230383800143934313932313638313337313537000439354E41";
                        break;
                    case 8://echo
                        msg = "600000000008102038000002000002000000000007082819071730300153000123831393232303330363734340033234300022333330303030313232303031353837383030303038380013373039323230302D313538373800423831393232303031353837383132333435363738393031323334353637383930313233343536373839300009393057322E3230343700143934313932313638303031303330001739353836353036373033373132383534360003313330";
                        break;
                    case 1://consulta
                        if (isoData.getField(3).equals("410000")) {
                            msg = "600000000001102020000002C000114100000000403030303030303131313730303030303030303630373030303100195452414E53414343494F4E20455849544F534101977B22737461747573223A2273756363657373222C2271725F65787072657373223A7B22616D6F756E74223A393030302C22686F6F6B5F616C696173223A2253424A50573936313538222C226465736372697074696F6E223A22436F6D70726120656E20636F6D657263696F222C2275726C223A22706F73222C22637265617465645F6174223A2231372F30372F323032342031313A35343A3231222C2271725F64617461223A2230303032303130313032313230323035313030363930333134343732303430313534333132333435323034353431313533303336303035343036393030302E30353830325059353931395355432031205355502E4D41524156494C4C41363030384153554E43494F4E3632393530333130303030363037303030313035313053424A505739363135383037313546323030323032333338303134313530383131436F6D70726120652E2E2E313130333430303530323230303131766973612E636F6D2E7079303330332A2A2A3633303435453136227D2C22737570706F727465645F636C69656E7473223A6E756C6C7D";
                            break;
                        }
                    case 2://venta
                        if (isoData.getField(3).equals("420000")) {//venta QR
                            msg
                            break;
                        }
                    default:
                        msg = "60000000000210303807000AC00202000000000000900000000046161149071600720000000037323131363433303934373230303030303031313137303030303030303036303730303031020639463333303330303030343039353035303030303030303030303946333730343132334244323339394631303037303630313041303341303238303039463236303845393132323635433935343445424145394633363032303243443832303232303030394330313030394130333234303731363946303230363030303030303030393030303946323730313830394633343033334630303030394631413032303630303546324130323036303039463645303432303730303030303834303741303030303030303033313031300169004238313932323033303637343431323334353637383930313233343536373839303132333435363738393000123932303932303136343434370003383830000432395042009232324150524F4241444120202020202020202020202020202020202020202020202020202020202020204150524F42414441202020202020202020202020202020202020202020202020202020202020202032324150524F42414441000438395042";
                        break;
                }
                send(client.getSocket(), msg);
            } catch (IOException ioe) {
                System.out.println(ioe.getMessage());
            }

            communicationListener.onFinish(true);
        });
    }

    private byte[] receive(Socket sc) throws IOException {
        InputStream input = sc.getInputStream();
        byte[] grossLength = input.readNBytes(2); // read data length
        int lengthData = ToolBox.bytesToInt(0, grossLength.length, grossLength); // unpack data length
        return input.readNBytes(lengthData); // read the length obtained
    }

    private void send(Socket sc, String hexMsg) throws IOException {
        byte[] raw = ToolBox.hexToByteAscii(hexMsg);
        byte[] data = new byte[raw.length + 2];
        data[0] = (byte) (raw.length >> 8);
        data[1] = (byte) (raw.length);
        System.arraycopy(raw, 0, data, 2, raw.length);
        System.out.println("ISO_SENT: " + HexFormatter.toHexString(data));
        sc.getOutputStream().write(data, 0, data.length);
    }

    public interface CommunicationListener {

        void onFinish(boolean success);
    }
}