package ui;

import java.awt.Component;

import iso8583.exceptions.Iso8583InvalidFormatException;
import tcp.Server;
import tcp.Server.ClientListener;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import javax.swing.*;

import tcp.data.Client;

/**
 *
 * @author PathTrack
 */
public class MainUI extends JFrame {

    public static final String PROGRAM_PATH = URLDecoder.decode(new File(MainUI.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent(), StandardCharsets.UTF_8);
    private Server server;

    public MainUI() {
        initComponents();
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (server != null) {
                    try {
                        server.close();
                    } catch (IOException ignored) {
                    }
                }
                super.windowClosing(e);
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        serverBtn = new JButton();
        settingsBtn = new JButton();
        JScrollPane jScrollPane = new JScrollPane();
        dataPanel = new JPanel();
        JButton clearBtn = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(570, 350));
        setMinimumSize(new java.awt.Dimension(570, 350));
        setPreferredSize(new java.awt.Dimension(570, 350));
        setResizable(false);

        serverBtn.setText("Run Server");
        serverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverBtnActionPerformed(evt);
            }
        });

        settingsBtn.setIcon(new ImageIcon(getClass().getResource("/sources/settings_ico.png"))); // NOI18N
        settingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsBtnActionPerformed(evt);
            }
        });

        jScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        dataPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jScrollPane.setViewportView(dataPanel);

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearBtn)
                        .addGap(162, 162, 162)
                        .addComponent(serverBtn)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                        .addComponent(settingsBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(settingsBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(serverBtn)
                            .addComponent(clearBtn))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }

    private final ClientListener clientListener = new ClientListener() {
        @Override
        public void onNewClient(String clientIp) {
            FlowLayout layout = ((FlowLayout) dataPanel.getLayout());
            if (dataPanel.getComponentCount() + 1 > (layout.getHgap() * layout.getVgap())) {
                layout.setHgap(layout.getHgap() + 1);
            }
            JButton btn = new JButton(clientIp);
            btn.setName(clientIp);
            btn.setEnabled(false);
            btn.addActionListener((ActionEvent e) -> {
                Client clientTarget = server.getClient(clientIp);
                if (clientTarget == null) {
                    dataPanel.remove(searchComponentByName(dataPanel, clientIp));
                    dataPanel.validate();
                    dataPanel.repaint();
                    return;
                }
                CommunicationDialog dialog = new CommunicationDialog(MainUI.this, true, clientTarget);
                dialog.setVisible(true);
            });
            dataPanel.add(btn);
            dataPanel.validate();
            dataPanel.repaint();
        }

        @Override
        public void onReceivedOfClient(String clientIp) {
            searchComponentByName(dataPanel, clientIp).setEnabled(true);
            dataPanel.validate();
            dataPanel.repaint();
        }

        @Override
        public void onLostClient(String clientIp) {
            dataPanel.remove(searchComponentByName(dataPanel, clientIp));
            dataPanel.validate();
            dataPanel.repaint();
        }
    };

    private Component searchComponentByName(JPanel panel, String judgment) {
        Component[] subComponents = panel.getComponents();
        for (Component subComponent : subComponents) {
            if (subComponent.getName().equals(judgment)) {
                return subComponent;
            }
        }
        return null;
    }

    private void serverBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (server == null) {
            settingsBtn.setEnabled(false);
            try {
                server = new Server(2020, clientListener);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "No se pudo crear el servidor", "Server Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                server.searchClients();
            } catch (Iso8583InvalidFormatException e) {
                serverBtnActionPerformed(null);
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            serverBtn.setText("Stop Server");
        } else {
            try {
                server.close();
            } catch (IOException ex) {
            }
            server = null;
            serverBtn.setText("Run Server");
            settingsBtn.setEnabled(true);
        }
    }

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void settingsBtnActionPerformed(java.awt.event.ActionEvent evt) {
        SettinsDialog dialog = new SettinsDialog(this, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {

            }
        });
        dialog.pack();
        dialog.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainUI().setVisible(true);
        });
    }

    private JPanel dataPanel;
    private JButton serverBtn;
    private JButton settingsBtn;
}
